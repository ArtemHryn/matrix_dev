{"version":3,"file":"static/js/3.e8f44e6c.chunk.js","mappings":"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","sources":["components/CalculatorPageComponents/CompatibilityMatrix/Partners/DataInput/PartnerData.jsx","components/CalculatorPageComponents/CompatibilityMatrix/Partners/DataInput/DataInput.jsx","components/CalculatorPageComponents/CompatibilityMatrix/Partners/Partners.jsx","components/CalculatorPageComponents/PersonalMatrix/DataInput/DataByDate/DataByDate.styled.jsx"],"sourcesContent":["import { Box } from 'components/Box';\nimport DataByDate from 'components/CalculatorPageComponents/PersonalMatrix/DataInput/DataByDate/DataByDate';\nimport DataByNineDigits from 'components/CalculatorPageComponents/PersonalMatrix/DataInput/DataByNineDigits/DataByNineDigits';\nimport { useEffect, useState } from 'react';\n\nconst PartnerData = ({ register, setValue, errors, infoErrors, index }) => {\n  const [isFlipped, setIsFlipped] = useState(false);\n  useEffect(() => {\n    setValue(`info[${index}].isGenerated`, isFlipped);\n  }, [index, isFlipped, setValue]);\n  return (\n    <Box position=\"relative\">\n      <DataByDate\n        isFlipped={isFlipped}\n        setIsFlipped={setIsFlipped}\n        register={register}\n        setValue={setValue}\n        errors={errors}\n        infoErrors={infoErrors}\n        index={index}\n      />\n      <DataByNineDigits\n        isFlipped={isFlipped}\n        setIsFlipped={setIsFlipped}\n        register={register}\n        setValue={setValue}\n        index={index}\n      />\n    </Box>\n  );\n};\n\nexport default PartnerData;\n","import { useTranslation } from 'react-i18next';\nimport { Box } from 'components/Box';\nimport { useFieldArray, useForm } from 'react-hook-form';\nimport PartnerData from './PartnerData';\nimport { SubmitBtn } from 'components/CalculatorPageComponents/PersonalMatrix/DataInput/DataInput.styled';\nimport { useMatrix } from 'pages/Calculator';\nimport { MatrixNumber } from '../Partners.styled';\nimport FullOverlapCheckBox from '../../FullOverlapCheckBox/FullOverlapCheckBox';\n\nconst DataInput = ({ setIsFullOverlap }) => {\n  const { setPartnersDate, setShowMatrix } = useMatrix();\n  const { t } = useTranslation('calc');\n  const {\n    register,\n    control,\n    handleSubmit,\n    setValue,\n    formState: { errors },\n  } = useForm({\n    defaultValues: {\n      info: [\n        { date: '', name: '' },\n        { date: '', name: '' },\n      ],\n    },\n  });\n  const { fields } = useFieldArray({\n    name: 'info',\n    control,\n  });\n  const onSubmit = data => {\n    const partnersInfo = [];\n    data.info.forEach(element => {\n      if (element.isGenerated) {\n        delete element.date;\n        delete element.name;\n        partnersInfo.push(element);\n        return;\n      }\n      const [day, month, year] = element.date.split('.');\n      partnersInfo.push({\n        day,\n        month,\n        year,\n        isGenerated: element.isGenerated,\n        name: element.name,\n      });\n    });\n\n    setPartnersDate(partnersInfo);\n    setShowMatrix(true);\n    setIsFullOverlap(data.isFullOverlap);\n    document.activeElement.blur();\n  };\n\n  return (\n    <Box as=\"form\" mb={['87px']} onSubmit={handleSubmit(onSubmit)}>\n      <Box display={[null, null, 'flex']} justifyContent=\"space-evenly\">\n        {fields.map((field, index) => (\n          <Box key={field.id}>\n            <MatrixNumber>\n              {t('tableMatrix')} {index + 1}\n            </MatrixNumber>\n            <PartnerData\n              register={register}\n              setValue={setValue}\n              errors={errors}\n              infoErrors={errors.info}\n              index={index}\n            />\n          </Box>\n        ))}\n      </Box>\n      <FullOverlapCheckBox register={register} />\n      <SubmitBtn\n        type=\"submit\"\n        whileHover={{ scale: 1.05 }}\n        whileFocus={{ scale: 1.05 }}\n        whileTap={{ scale: 0.95 }}\n      >\n        {t('personalMatrixCalc')}\n      </SubmitBtn>\n    </Box>\n  );\n};\n\nexport default DataInput;\n","import { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport DataInput from './DataInput/DataInput';\nimport { useMatrix } from 'pages/Calculator';\nimport {\n  allData,\n  getCompatData,\n  getPartnersChakra,\n} from 'helper/calculateMatrix';\nimport { Box } from 'components/Box';\nimport PartnerMatrix from './PartnerMatrix/PartnerMatrix';\nimport ResultMatrix from './ResultMatrix/ResultMatrix';\nimport HealthCard from 'components/CalculatorPageComponents/PersonalMatrix/MatrixCalculation/HealthMatrix/HealthTables/HealthCard/HealthCard';\n\nconst Partners = () => {\n  const [resultData, setResultData] = useState([]);\n  const [partnersMatrixData, setPartnersMatrixData] = useState([]);\n  const [partnersHealthCard, setPartnersHealthCard] = useState([]);\n  const [isFullOverlap, setIsFullOverlap] = useState(false);\n  const { t, i18n } = useTranslation('calc');\n\n  const { partnersDate, showMatrix } = useMatrix();\n\n  useEffect(() => {\n    if (partnersDate === 0) {\n      return;\n    }\n    const partners = [];\n    partnersDate.forEach((element, index) => {\n      const partnerInfo = allData(element, element.isGenerated);\n      partnerInfo.order = `${t('tableMatrix')} ${index + 1}`;\n      partners.push(partnerInfo);\n    });\n    setPartnersMatrixData(partners);\n  }, [partnersDate, showMatrix, t]);\n\n  useEffect(() => {\n    setResultData(getCompatData(partnersMatrixData, isFullOverlap));\n\n    if (partnersMatrixData.length === 0) return;\n    setPartnersHealthCard(getPartnersChakra(partnersMatrixData, i18n.language));\n  }, [i18n.language, isFullOverlap, partnersMatrixData]);\n\n  return (\n    <>\n      <DataInput setIsFullOverlap={setIsFullOverlap} />\n      {showMatrix && (\n        <>\n          <ResultMatrix resultData={resultData} />\n          <Box\n            width={[null, null, '900px']}\n            m={'0 auto'}\n            mb={['40px', '70px', '110px']}\n          >\n            {' '}\n            <HealthCard card={partnersHealthCard} cardType={1} />\n          </Box>\n          <Box\n            display={[null, null, 'flex']}\n            justifyContent=\"space-between\"\n            gridGap=\"40px\"\n          >\n            {partnersMatrixData.map((partner, index) => (\n              <PartnerMatrix\n                key={partner.order}\n                partner={partner}\n                date={partnersDate[index]}\n                lastIndex={\n                  index === partnersMatrixData.length - 1 ? true : false\n                }\n              />\n            ))}\n          </Box>\n        </>\n      )}\n    </>\n  );\n};\n\nexport default Partners;\n","import { motion } from 'framer-motion';\nimport styled from 'styled-components';\nimport { space } from 'styled-system';\n\nexport const FrontCard = styled(motion.div)`\n  position: relative;\n  background: linear-gradient(\n    180deg,\n    rgba(255, 255, 255, 0.3) 0%,\n    rgba(249, 237, 255, 0.3) 100%\n  );\n  border: 0.5px solid #72499b;\n  border-radius: 14px;\n  padding: 36px 42px 68px;\n  backface-visibility: hidden;\n  margin-bottom: 25px;\n  height: 210px;\n  @media screen and (min-width: ${p => p.theme.sizes.tablet}) {\n    width: 430px;\n    height: 278px;\n    margin: 0 auto 38px;\n    padding: 48px 55px 68px;\n  }\n\n`;\n\nexport const Input = styled.input`\n  background: rgba(255, 255, 255, 0.5);\n  border: 0.6px solid rgba(221, 197, 255, 0.6);\n  border-radius: 6px;\n  width: 100%;\n  height: 45px;\n  padding: 10px 14px;\n\n  font-family: ${p => p.theme.fonts.main};\n  font-style: normal;\n  font-weight: 400;\n  font-size: 16px;\n  line-height: 1.19;\n\n  color: ${p => p.theme.colors.secondText};\n  margin-bottom: 10px;\n  ${space}\n  &:focus-within {\n    border: 2px solid rgba(221, 197, 255, 0.8);\n    outline: none;\n  }\n\n  @media screen and (min-width: ${p => p.theme.sizes.tablet}) {\n    height: 57px;\n    font-size: 21px;\n  }\n`;\n\nexport const Error = styled.p`\n  text-align: center;\n  color: #a40b8a;\n  font-size: 20px;\n  margin: 0 auto;\n`;\n"],"names":["register","setValue","errors","infoErrors","index","useState","isFlipped","setIsFlipped","useEffect","Box","position","DataByDate","DataByNineDigits","setIsFullOverlap","useMatrix","setPartnersDate","setShowMatrix","t","useTranslation","useForm","defaultValues","info","date","name","control","handleSubmit","formState","fields","useFieldArray","as","mb","onSubmit","data","partnersInfo","forEach","element","isGenerated","push","split","day","month","year","isFullOverlap","document","activeElement","blur","display","justifyContent","map","field","id","FullOverlapCheckBox","type","whileHover","scale","whileFocus","whileTap","resultData","setResultData","partnersMatrixData","setPartnersMatrixData","partnersHealthCard","setPartnersHealthCard","i18n","partnersDate","showMatrix","partners","partnerInfo","allData","order","getCompatData","length","getPartnersChakra","language","ResultMatrix","width","m","HealthCard","card","cardType","gridGap","partner","PartnerMatrix","lastIndex","FrontCard","styled","motion","p","theme","sizes","tablet","Input","fonts","main","colors","secondText","space","Error"],"sourceRoot":""}